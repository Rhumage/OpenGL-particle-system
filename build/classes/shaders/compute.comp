#version 430

layout(local_size_x = 128, local_size_y = 1) in;

layout (std430, binding = 0) buffer Pos {
    vec4 Positions[];
};

layout (std430, binding = 1) buffer Vel {
    vec4 Velocities[];
};

layout (std430, binding = 2) buffer Lif {
    float Lifespans[];
};

uniform float delta;

const float maxLifespan = 5.0f;
const vec3 initVelocity = vec3(15.0f, 0.0f, 0.0f);

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453f);
}

vec3 calcInitPos(float prevX, float prevY, float prevZ) {
    vec2 seedX = vec2(prevY, prevZ);
    vec2 seedY = vec2(prevX, prevZ);
    vec2 seedZ = vec2(prevX, prevY);
    float x = rand(seedX) * 10 - 25;
    float z = rand(seedY) * 10 - 5;
    float y = rand(seedZ) * 7 + 10;
    return vec3(x, y, z);
}

void main() {
    uint gid = gl_GlobalInvocationID.x;

    Velocities[gid].x = Velocities[gid].x - Velocities[gid].x / 3 * delta;
    Velocities[gid].y = Velocities[gid].y - 9.81f * delta;

    Positions[gid].xyz = Positions[gid].xyz + Velocities[gid].xyz * delta;

    Lifespans[gid].x = Lifespans[gid].x + delta;

    if (Lifespans[gid] > maxLifespan) {
        Positions[gid].xyz = calcInitPos(Positions[gid].x, Positions[gid].y, Positions[gid].z);
        Lifespans[gid] = 0;
        Velocities[gid].xyz = initVelocity;
    }
}